Below is the complete code to demonstrate all the factors covered so far, 
including the use of Pug templating, CSS styles, jQuery for form interactivity, and form handling in the Node.js application.

Step 1: Set Up the Project

1.1. Create a new folder for the project and navigate into it.

1.2. Initialize a new Node.js project by running npm init and following the prompts.

1.3. Install required dependencies:

bash
Copy code
npm install express pug body-parser
Step 2: Create the Backend - Express Server with Pug Templating

2.1. Create an app.js file in your project's root directory.

2.2. Import the required modules and set up the Express server to use Pug as the templating engine.

javascript
Copy code
// app.js

const express = require('express');
const bodyParser = require('body-parser');
const app = express();
const port = 3000; // You can use any port number you prefer

// Set the 'views' directory as the location for Pug templates
app.set('views', './views');
app.set('view engine', 'pug');

// Body parser middleware
app.use(bodyParser.urlencoded({ extended: true }));
app.use(bodyParser.json());

// Define a route for the root URL and render the Pug template
app.get('/', (req, res) => {
  res.render('index', { title: 'Simple Pug Template' });
});

// Define a route to render the Pug template with a form
app.get('/form', (req, res) => {
  res.render('form', { title: 'Form Example' });
});

// Define a route to handle form submission
app.post('/submit', (req, res) => {
  const name = req.body.name;
  res.send(`Hello, ${name}! Your form was submitted successfully.`);
});

// Start the server
app.listen(port, () => {
  console.log(`Server started on http://localhost:${port}`);
});
Step 3: Create the Pug Templates

3.1. Create a new directory named views in your project's root directory. This is where your Pug templates will be stored.

3.2. Create two Pug templates, index.pug and form.pug, inside the views directory.

pug
Copy code
// views/index.pug

doctype html
html
  head
    title= title
    link(rel="stylesheet", href="/styles.css")

    // Include jQuery from the CDN
    script(src="https://code.jquery.com/jquery-3.6.0.min.js")

    // jQuery script for interactive form actions
    script.
      $(document).ready(function() {
        // Hide the submit button initially
        $('button[type="submit"]').hide();

        // Show the submit button only when the input field is filled
        $('input[name="name"]').on('input', function() {
          if ($(this).val().trim() !== '') {
            $('button[type="submit"]').show();
          } else {
            $('button[type="submit"]').hide();
          }
        });

        // Change the page background color to blue when the form is filled
        $('form').on('submit', function(event) {
          event.preventDefault();
          const name = $('input[name="name"]').val().trim();
          if (name !== '') {
            $('body').css('background-color', 'blue');
            alert('Hello, ' + name + '! Your form was submitted successfully.');
          }
        });
      });

  body(style="background-color: red; color: gold;")
    h1 Hello, Pug Templating!

    form(action="/submit", method="POST")
      label(for="name") Your Name:
      input(type="text", name="name", required)
      br
      // The submit button is hidden initially and shown dynamically using jQuery
      button(type="submit") Submit
pug
Copy code
// views/form.pug

doctype html
html
  head
    title= title
    link(rel="stylesheet", href="/styles.css")

  body
    h1 Form Example

    form(action="/submit", method="POST")
      label(for="name") Your Name:
      input(type="text", name="name", required)
      br
      button(type="submit") Submit
Step 4: Create the CSS Styles

4.1. Create a new file named styles.css in your project's root directory.

css
Copy code
/* styles.css */

body {
  background-color: red;
  color: gold;
}

h1 {
  font-size: 3rem;
}

form {
  margin: 20px;
  padding: 20px;
  border: 1px solid #ccc;
}
Step 5: Run the Application

5.1. Open a terminal and navigate to the project's root directory.

5.2. Run the application using Node.js:


node app.js
5.3. Open your web browser and visit http://localhost:3000. You should see a basic webpage with the text "Hello, Pug Templating!" rendered using Pug. The page background should be red with gold large letters.

5.4. Navigate to http://localhost:3000/form to see the form page. When you fill out the form and submit it, the page background should change to blue.

With these changes, you have a fully functional Node.js application that uses Pug templating, CSS styles, and jQuery for interactivity and form handling. It demonstrates how to render dynamic pages, handle form submissions, and enhance user experience with client-side interactivity using jQuery.




